const utilities = require(".")
const { body, validationResult } = require("express-validator")
//const inventoryModel = require("../models/inventory-model")
const validate = {}

/*  **********************************
 *  Classification Addition Data Validation Rules
 * ********************************* */
validate.classificationRules = () => {
    return [
      // classificiation name is required and must be string
      body("classification_name")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a name for this classificaiton."), // on error this message is sent.
    ]
}

/* ******************************
 * Check data and return errors or continue to classification addition
 * ***************************** */
validate.checkClassificationData = async (req, res, next) => {
    const { classification_name } = req.body
    let errors = []
    errors = validationResult(req)
    if (!errors.isEmpty()) {
      let nav = await utilities.getNav()
      res.render("./inventory/add-classification", {
        errors,
        metaTitle: `Add Classification Form - CSE 340`,
        title: "Add New Classification",    
        nav,
        classification_name,
      })
      return
    }
    next()
}

/*  **********************************
 *  Inventory Addition Data Validation Rules
 * ********************************* */
validate.inventoryRules = () => {
    return [
      // make is required and must be string
      body("inv_make")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a make for this vehicle."), // on error this message is sent.
  
      // model is required and must be string
      body("inv_model")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a model for this vehicle."), // on error this message is sent.

      // year is required and must be a number between 1900 and 2023
      body("inv_year")
        .trim()
        .isInt({ min: 1900, max: 2023 })
        .withMessage("Please provide a year (1900-2023) for this vehicle."), // on error this message is sent.

      // description is required and must be string
      body("inv_description")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a description for this vehicle."), // on error this message is sent.
  
      // image is required and must be string
      body("inv_image")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide an image for this vehicle."), // on error this message is sent.

      // thumbnail is required and must be string
      body("inv_thumbnail")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a thumbnail image for this vehicle."), // on error this message is sent.

      // price is required and must be a number
      body("inv_price")
        .trim()
        .isInt({ min: 1 })
        .withMessage("Please provide a price for this vehicle."), // on error this message is sent.

      // price is required and must be a number
      body("inv_miles")
        .trim()
        .isInt({ min: 1 })
        .withMessage("Please provide the number of miles for this vehicle."), // on error this message is sent.

      // color is required and must be string
      body("inv_color")
        .trim()
        .isLength({ min: 1 })
        .withMessage("Please provide a color for this vehicle."), // on error this message is sent.

      // classification is required and must be a number
      body("classification_id")
        .trim()
        .isInt({ min: 1 })
        .withMessage("Please select a classification for this vehicle."), // on error this message is sent.
    ]
}

/* ******************************
 * Check data and return errors or continue to inventory addition
 * ***************************** */
validate.checkInventoryData = async (req, res, next) => {
    const { inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color, classification_id } = req.body
    let errors = []
    errors = validationResult(req)
    if (!errors.isEmpty()) {
      let nav = await utilities.getNav()
      const classificationOptions = await utilities.getClassificationOptions(classification_id)
      res.render("./inventory/add-inventory", {
        errors,
        metaTitle: `Add Inventory Form - CSE 340`,
        title: "Add New Inventory",    
        nav,
        classificationOptions,
        inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color,
      })
      return
    }
    next()
}

/*  **********************************
 *  Inventory Addition Data Validation Rules
 * ********************************* */
validate.inventoryUpdateRules = () => {
  return [
    // make is required and must be string
    body("inv_make")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide a make for this vehicle."), // on error this message is sent.

    // model is required and must be string
    body("inv_model")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide a model for this vehicle."), // on error this message is sent.

    // year is required and must be a number between 1900 and 2023
    body("inv_year")
      .trim()
      .isInt({ min: 1900, max: 2023 })
      .withMessage("Please provide a year (1900-2023) for this vehicle."), // on error this message is sent.

    // description is required and must be string
    body("inv_description")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide a description for this vehicle."), // on error this message is sent.

    // image is required and must be string
    body("inv_image")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide an image for this vehicle."), // on error this message is sent.

    // thumbnail is required and must be string
    body("inv_thumbnail")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide a thumbnail image for this vehicle."), // on error this message is sent.

    // price is required and must be a number
    body("inv_price")
      .trim()
      .isInt({ min: 1 })
      .withMessage("Please provide a price for this vehicle."), // on error this message is sent.

    // price is required and must be a number
    body("inv_miles")
      .trim()
      .isInt({ min: 1 })
      .withMessage("Please provide the number of miles for this vehicle."), // on error this message is sent.

    // color is required and must be string
    body("inv_color")
      .trim()
      .isLength({ min: 1 })
      .withMessage("Please provide a color for this vehicle."), // on error this message is sent.

    // classification is required and must be a number
    body("classification_id")
      .trim()
      .isInt({ min: 1 })
      .withMessage("Please select a classification for this vehicle."), // on error this message is sent.

    body("inv_id")
      .trim()
      .isInt({ min: 1 })
      .withMessage("Please specify which vehicle these updates are pertaining to."), // on error this message is sent.
  ]
}

/* ******************************
 * Check data and return errors or continue to inventory edit
 * ***************************** */
validate.checkUpdateData = async (req, res, next) => {
  const { inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color, classification_id, inv_id } = req.body
  let errors = []
  errors = validationResult(req)
  if (!errors.isEmpty()) {
    let nav = await utilities.getNav()
    const classificationOptions = await utilities.getClassificationOptions(classification_id)
    res.render("./inventory/edit-inventory", {
      errors,
      metaTitle: "Edit Inventory - " + inv_make + " " + inv_model + " - CSE 340",
      title: "Edit Inventory - " + inv_make + " " + inv_model,   
      nav,
      classificationOptions,
      inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color, inv_id,
    })
    return
  }
  next()
}
  
module.exports = validate